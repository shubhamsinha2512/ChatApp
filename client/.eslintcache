[{"E:\\Projects\\ChatApp\\client\\src\\index.js":"1","E:\\Projects\\ChatApp\\client\\src\\App.js":"2","E:\\Projects\\ChatApp\\client\\src\\components\\Join\\Join.js":"3","E:\\Projects\\ChatApp\\client\\src\\components\\Chat\\Chat.js":"4","E:\\Projects\\ChatApp\\client\\src\\components\\Infobar\\Infobar.js":"5","E:\\Projects\\ChatApp\\client\\src\\components\\Input\\Input.js":"6","E:\\Projects\\ChatApp\\client\\src\\components\\Messages\\Messages.js":"7"},{"size":410,"mtime":1608474279419,"results":"8","hashOfConfig":"9"},{"size":373,"mtime":1608475891610,"results":"10","hashOfConfig":"9"},{"size":996,"mtime":1608477651497,"results":"11","hashOfConfig":"9"},{"size":1626,"mtime":1608539333847,"results":"12","hashOfConfig":"9"},{"size":618,"mtime":1608538402218,"results":"13","hashOfConfig":"9"},{"size":611,"mtime":1608539240249,"results":"14","hashOfConfig":"9"},{"size":148,"mtime":1608543526825,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"b4mepb",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\Projects\\ChatApp\\client\\src\\index.js",[],["33","34"],"E:\\Projects\\ChatApp\\client\\src\\App.js",[],"E:\\Projects\\ChatApp\\client\\src\\components\\Join\\Join.js",[],"E:\\Projects\\ChatApp\\client\\src\\components\\Chat\\Chat.js",["35","36"],"import React from 'react'\r\nimport {useState, useEffect} from 'react'\r\nimport queryString from 'query-string'\r\nimport io from 'socket.io-client'\r\n\r\nimport Infobar from '../Infobar/Infobar'\r\nimport Input from '../Input/Input'\r\nimport Messages from '../Messages/Messages'\r\nimport './Chat.css'\r\n\r\nlet socket;\r\n\r\nfunction Chat({location}) {\r\n\r\n    const [name, setName] = useState('')\r\n    const [room, setRoom] = useState('')\r\n    const [messages, setMessages] = useState([]);\r\n    const [message, setMessage] = useState([]);\r\n\r\n    const URL = 'localhost:5000';\r\n\r\n    useEffect(()=>{\r\n\r\n        const {name, room} = queryString.parse(location.search);\r\n\r\n        socket = io(URL);\r\n        setName(name);\r\n        setRoom(room);\r\n\r\n        console.log(name, room);\r\n        socket.emit('join', {name, room},()=>{});\r\n\r\n        return ()=>{\r\n            socket.emit('disconnect');\r\n            socket.off();\r\n        }\r\n    },[URL, location.search]);\r\n\r\n\r\n    useEffect(()=>{\r\n        socket.on('message', (message)=>{\r\n            setMessages([...messages, message]);\r\n        });\r\n    }, [messages]);\r\n\r\n    function sendMessage(event){\r\n        event.preventDefault();\r\n        if(message){\r\n            socket.emit('sendMessage', message, ()=> setMessage(''));\r\n        }\r\n        console.log(message, messages);\r\n    }\r\n\r\n    return (\r\n        <div className=\"outerContainer\">\r\n            <div className=\"container\">\r\n                <Infobar room={room} />\r\n                <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat\r\n","E:\\Projects\\ChatApp\\client\\src\\components\\Infobar\\Infobar.js",["37"],"import React from 'react'\r\nimport './Infobar.css'\r\n\r\nimport closeIcon from'../../icons/closeIcon.png'\r\nimport onlineIcon from'../../icons/onlineIcon.png'\r\n\r\nfunction Infobar({room}) {\r\n    return (\r\n        <div className=\"infoBar\">\r\n            <div className=\"leftInnerContainer\">\r\n                <img className=\"onlineIcon\" src={onlineIcon} alt=\"online-icon\" />\r\n                <h3>{room}</h3>\r\n            </div>\r\n            <div className=\"rightInnerContainer\">\r\n                <a href=\"/\"><img src={closeIcon} alt=\"close image\" /></a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Infobar\r\n","E:\\Projects\\ChatApp\\client\\src\\components\\Input\\Input.js",[],"E:\\Projects\\ChatApp\\client\\src\\components\\Messages\\Messages.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":8,"column":8,"nodeType":"44","messageId":"45","endLine":8,"endColumn":16},{"ruleId":"42","severity":1,"message":"46","line":15,"column":12,"nodeType":"44","messageId":"45","endLine":15,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":15,"column":29,"nodeType":"49","endLine":15,"endColumn":70},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'Messages' is defined but never used.","Identifier","unusedVar","'name' is assigned a value but never used.","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]